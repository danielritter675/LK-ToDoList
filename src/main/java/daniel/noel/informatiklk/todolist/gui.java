package daniel.noel.informatiklk.todolist;

import java.time.LocalDate;
import javax.swing.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.awt.event.ActionEvent;
import java.util.List;

import daniel.noel.informatiklk.todolist.Task;
import daniel.noel.informatiklk.todolist.TaskList;

public class gui extends javax.swing.JFrame {

    private TaskList taskList;
    private DefaultListModel<String> listModel;

    public gui() {
        initComponents();
        this.setLocationRelativeTo(null);
        taskList = new TaskList();
        listModel = new DefaultListModel<>();
        taskListFrame.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taskListFrame = new javax.swing.JList<>();
        textFieldTitle = new javax.swing.JTextField();
        labelTitleLeft = new javax.swing.JLabel();
        textFieldDueDate = new javax.swing.JTextField();
        textFieldDescription = new javax.swing.JTextField();
        labelDescription = new javax.swing.JLabel();
        labelDueDate = new javax.swing.JLabel();
        labelTitleFieldInput = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        comboBoxStatus = new javax.swing.JComboBox<>();
        buttonDeleteTask = new javax.swing.JButton();
        buttonAddTask = new javax.swing.JButton();
        labelTitleMain = new javax.swing.JLabel();
        buttonEditTask = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(828, 550));

        taskListFrame.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(taskListFrame);

        labelTitleLeft.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelTitleLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitleLeft.setText("Einträge Bearbeiten");

        textFieldDueDate.setToolTipText("Format: DD-MM-YYYY");

        labelDescription.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelDescription.setText("Beschreibung:");

        labelDueDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelDueDate.setText("Fälligskeitsdatum:");

        labelTitleFieldInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelTitleFieldInput.setText("Titel:");

        labelStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelStatus.setText("Status:");

        comboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Zu Erledigen", "In Arbeit", "Abgeschlossen" }));

        buttonDeleteTask.setText("Löschen");
        buttonDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteTaskActionPerformed(evt);
            }
        });

        buttonAddTask.setText("Hinzufügen");
        buttonAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddTaskActionPerformed(evt);
            }
        });

        labelTitleMain.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelTitleMain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitleMain.setText("ToDo-Liste");

        buttonEditTask.setText("Aktualisieren");
        buttonEditTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(labelTitleMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitleFieldInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDueDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(labelStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonEditTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxStatus, 0, 652, Short.MAX_VALUE)
                            .addComponent(textFieldDueDate)
                            .addComponent(textFieldDescription)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonDeleteTask, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonAddTask, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textFieldTitle)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTitleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitleMain, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelTitleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTitleFieldInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textFieldDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddTask)
                    .addComponent(buttonEditTask)
                    .addComponent(buttonDeleteTask))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDeleteTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteTaskActionPerformed
        int selectedIndex = taskListFrame.getSelectedIndex();
        if (selectedIndex != -1) {
            Task task = taskList.getTasks().get(selectedIndex);
            taskList.deleteTask(task);
            JOptionPane.showMessageDialog(this, "Task gelöscht: " + task.toString());
            updateTaskList();
        } else {
            JOptionPane.showMessageDialog(this, "Bitte wählen Sie eine Task zum Löschen aus.");
        }
    }//GEN-LAST:event_buttonDeleteTaskActionPerformed

    private void buttonAddTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddTaskActionPerformed
        try {
            String titel = textFieldTitle.getText();
            String beschreibung = textFieldDescription.getText();
            if (titel.isEmpty() || beschreibung.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Titel und Beschreibung dürfen nicht leer sein.", "Fehlende Eingaben", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate faelligkeitsdatum = LocalDate.parse(textFieldDueDate.getText(), formatter);
            String status = comboBoxStatus.getSelectedItem().toString();

            Task task = new Task(titel, beschreibung, faelligkeitsdatum, status);
            taskList.addTask(task);
            JOptionPane.showMessageDialog(this, "Task hinzugefügt: " + task.toString());
            updateTaskList();
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Bitte geben Sie ein gültiges Datum im Format 'DD-MM-YYYY' ein.", "Ungültiges Datum", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonAddTaskActionPerformed

    private void buttonEditTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditTaskActionPerformed
        int selectedIndex = taskListFrame.getSelectedIndex();
        if (selectedIndex != -1) {
            Task selectedTask = taskList.getTasks().get(selectedIndex);

            String neuerTitel = JOptionPane.showInputDialog(this, "Geben Sie den neuen Titel ein:", selectedTask.getTitel());
            if (neuerTitel != null && !neuerTitel.isEmpty()) {
                selectedTask.setTitel(neuerTitel);
            } else {
                JOptionPane.showMessageDialog(this, "Titel darf nicht leer sein.", "Ungültiger Titel", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String neueBeschreibung = JOptionPane.showInputDialog(this, "Geben Sie die neue Beschreibung ein:", selectedTask.getBeschreibung());
            if (neueBeschreibung != null && !neueBeschreibung.isEmpty()) {
                selectedTask.setBeschreibung(neueBeschreibung);
            } else {
                JOptionPane.showMessageDialog(this, "Beschreibung darf nicht leer sein.", "Ungültige Beschreibung", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String neuesDatum = JOptionPane.showInputDialog(this, "Geben Sie das neue Fälligkeitsdatum ein (DD-MM-YYYY):", selectedTask.getFaelligkeitsdatum().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                LocalDate faelligkeitsdatum = LocalDate.parse(neuesDatum, formatter);
                selectedTask.setFaelligkeitsdatum(faelligkeitsdatum);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Bitte geben Sie ein gültiges Datum im Format 'DD-MM-YYYY' ein.", "Ungültiges Datum", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Setze den aktuellen Status in die ComboBox
            comboBoxStatus.setSelectedItem(selectedTask.getStatus());

            // Zeige ein Dialogfenster mit der ComboBox zur Statusauswahl
            int result = JOptionPane.showConfirmDialog(this, comboBoxStatus, "Status aktualisieren", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                String neuerStatus = (String) comboBoxStatus.getSelectedItem();
                selectedTask.setStatus(neuerStatus);
                JOptionPane.showMessageDialog(this, "Eintrag aktualisiert: " + selectedTask.toString());
                updateTaskList();
            } else {
                JOptionPane.showMessageDialog(this, "Statusaktualisierung abgebrochen.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bitte wählen Sie eine Task zum Bearbeiten aus.");
        }
    }//GEN-LAST:event_buttonEditTaskActionPerformed

    private void updateTaskList() {
        listModel.clear();
        List<Task> tasks = taskList.getTasks();
        for (Task task : tasks) {
            listModel.addElement(task.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddTask;
    private javax.swing.JButton buttonDeleteTask;
    private javax.swing.JButton buttonEditTask;
    private javax.swing.JComboBox<String> comboBoxStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDescription;
    private javax.swing.JLabel labelDueDate;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTitleFieldInput;
    private javax.swing.JLabel labelTitleLeft;
    private javax.swing.JLabel labelTitleMain;
    private javax.swing.JList<String> taskListFrame;
    private javax.swing.JTextField textFieldDescription;
    private javax.swing.JTextField textFieldDueDate;
    private javax.swing.JTextField textFieldTitle;
    // End of variables declaration//GEN-END:variables
}
